// Code generated by MockGen. DO NOT EDIT.
// Source: internal/managers/farm_manager.go

// Package mock_client is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	"github.com/rawdaGastan/farmerbot/internal/models"
)

// MockFarmHandler is a mock of FarmHandler interface.
type MockFarmHandler struct {
	ctrl     *gomock.Controller
	recorder *MockFarmHandlerMockRecorder
}

// MockFarmHandlerMockRecorder is the mock recorder for MockFarmHandler.
type MockFarmHandlerMockRecorder struct {
	mock *MockFarmHandler
}

// NewMockFarmHandler creates a new mock instance.
func NewMockFarmHandler(ctrl *gomock.Controller) *MockFarmHandler {
	mock := &MockFarmHandler{ctrl: ctrl}
	mock.recorder = &MockFarmHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFarmHandler) EXPECT() *MockFarmHandlerMockRecorder {
	return m.recorder
}

// Define mocks base method.
func (m *MockFarmHandler) Define(farm models.Farm) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Define", farm)
	ret0, _ := ret[0].(error)
	return ret0
}

// Define indicates an expected call of Define.
func (mr *MockFarmHandlerMockRecorder) Define(farm interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Define", reflect.TypeOf((*MockFarmHandler)(nil).Define), farm)
}
