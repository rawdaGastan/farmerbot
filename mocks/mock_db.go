// Code generated by MockGen. DO NOT EDIT.
// Source: internal/models/db.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	"github.com/rawdaGastan/farmerbot/internal/models"
)

// MockRedisManager is a mock of RedisManager interface.
type MockRedisManager struct {
	ctrl     *gomock.Controller
	recorder *MockRedisManagerMockRecorder
}

// MockRedisManagerMockRecorder is the mock recorder for MockRedisManager.
type MockRedisManagerMockRecorder struct {
	mock *MockRedisManager
}

// NewMockRedisManager creates a new mock instance.
func NewMockRedisManager(ctrl *gomock.Controller) *MockRedisManager {
	mock := &MockRedisManager{ctrl: ctrl}
	mock.recorder = &MockRedisManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRedisManager) EXPECT() *MockRedisManagerMockRecorder {
	return m.recorder
}

// FilterOnNodes mocks base method.
func (m *MockRedisManager) FilterOnNodes() ([]models.Node, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FilterOnNodes")
	ret0, _ := ret[0].([]models.Node)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FilterOnNodes indicates an expected call of FilterOnNodes.
func (mr *MockRedisManagerMockRecorder) FilterOnNodes() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FilterOnNodes", reflect.TypeOf((*MockRedisManager)(nil).FilterOnNodes))
}

// GetFarm mocks base method.
func (m *MockRedisManager) GetFarm() (models.Farm, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFarm")
	ret0, _ := ret[0].(models.Farm)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFarm indicates an expected call of GetFarm.
func (mr *MockRedisManagerMockRecorder) GetFarm() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFarm", reflect.TypeOf((*MockRedisManager)(nil).GetFarm))
}

// GetNode mocks base method.
func (m *MockRedisManager) GetNode(nodeID uint32) (models.Node, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNode", nodeID)
	ret0, _ := ret[0].(models.Node)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNode indicates an expected call of GetNode.
func (mr *MockRedisManagerMockRecorder) GetNode(nodeID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNode", reflect.TypeOf((*MockRedisManager)(nil).GetNode), nodeID)
}

// GetNodes mocks base method.
func (m *MockRedisManager) GetNodes() ([]models.Node, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNodes")
	ret0, _ := ret[0].([]models.Node)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNodes indicates an expected call of GetNodes.
func (mr *MockRedisManagerMockRecorder) GetNodes() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNodes", reflect.TypeOf((*MockRedisManager)(nil).GetNodes))
}

// GetPower mocks base method.
func (m *MockRedisManager) GetPower() (models.Power, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPower")
	ret0, _ := ret[0].(models.Power)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPower indicates an expected call of GetPower.
func (mr *MockRedisManagerMockRecorder) GetPower() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPower", reflect.TypeOf((*MockRedisManager)(nil).GetPower))
}

// SaveConfig mocks base method.
func (m *MockRedisManager) SaveConfig(config models.Config) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveConfig", config)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveConfig indicates an expected call of SaveConfig.
func (mr *MockRedisManagerMockRecorder) SaveConfig(config interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveConfig", reflect.TypeOf((*MockRedisManager)(nil).SaveConfig), config)
}

// SetFarm mocks base method.
func (m *MockRedisManager) SetFarm(farm models.Farm) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetFarm", farm)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetFarm indicates an expected call of SetFarm.
func (mr *MockRedisManagerMockRecorder) SetFarm(farm interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetFarm", reflect.TypeOf((*MockRedisManager)(nil).SetFarm), farm)
}

// SetNodes mocks base method.
func (m *MockRedisManager) SetNodes(nodes []models.Node) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetNodes", nodes)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetNodes indicates an expected call of SetNodes.
func (mr *MockRedisManagerMockRecorder) SetNodes(nodes interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetNodes", reflect.TypeOf((*MockRedisManager)(nil).SetNodes), nodes)
}

// SetPower mocks base method.
func (m *MockRedisManager) SetPower(power models.Power) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetPower", power)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetPower indicates an expected call of SetPower.
func (mr *MockRedisManagerMockRecorder) SetPower(power interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetPower", reflect.TypeOf((*MockRedisManager)(nil).SetPower), power)
}

// UpdatesNodes mocks base method.
func (m *MockRedisManager) UpdatesNodes(node models.Node) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatesNodes", node)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdatesNodes indicates an expected call of UpdatesNodes.
func (mr *MockRedisManagerMockRecorder) UpdatesNodes(node interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatesNodes", reflect.TypeOf((*MockRedisManager)(nil).UpdatesNodes), node)
}
