// Code generated by MockGen. DO NOT EDIT.
// Source: internal/rmb.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockRMBClient is a mock of RMBClient interface.
type MockRMBClient struct {
	ctrl     *gomock.Controller
	recorder *MockRMBClientMockRecorder
}

// MockRMBClientMockRecorder is the mock recorder for MockRMBClient.
type MockRMBClientMockRecorder struct {
	mock *MockRMBClient
}

// NewMockRMBClient creates a new mock instance.
func NewMockRMBClient(ctrl *gomock.Controller) *MockRMBClient {
	mock := &MockRMBClient{ctrl: ctrl}
	mock.recorder = &MockRMBClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRMBClient) EXPECT() *MockRMBClientMockRecorder {
	return m.recorder
}

// Call mocks base method.
func (m *MockRMBClient) Call(ctx context.Context, twin uint32, fn string, data, result interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Call", ctx, twin, fn, data, result)
	ret0, _ := ret[0].(error)
	return ret0
}

// Call indicates an expected call of Call.
func (mr *MockRMBClientMockRecorder) Call(ctx, twin, fn, data, result interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Call", reflect.TypeOf((*MockRMBClient)(nil).Call), ctx, twin, fn, data, result)
}
