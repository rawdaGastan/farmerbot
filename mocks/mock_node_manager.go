// Code generated by MockGen. DO NOT EDIT.
// Source: internal/managers/node_manager.go

// Package mock_client is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	"github.com/rawdaGastan/farmerbot/internal/models"
)

// MockNodeHandler is a mock of NodeHandler interface.
type MockNodeHandler struct {
	ctrl     *gomock.Controller
	recorder *MockNodeHandlerMockRecorder
}

// MockNodeHandlerMockRecorder is the mock recorder for MockNodeHandler.
type MockNodeHandlerMockRecorder struct {
	mock *MockNodeHandler
}

// NewMockNodeHandler creates a new mock instance.
func NewMockNodeHandler(ctrl *gomock.Controller) *MockNodeHandler {
	mock := &MockNodeHandler{ctrl: ctrl}
	mock.recorder = &MockNodeHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNodeHandler) EXPECT() *MockNodeHandlerMockRecorder {
	return m.recorder
}

// Define mocks base method.
func (m *MockNodeHandler) Define(node models.Node) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Define", node)
	ret0, _ := ret[0].(error)
	return ret0
}

// Define indicates an expected call of Define.
func (mr *MockNodeHandlerMockRecorder) Define(node interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Define", reflect.TypeOf((*MockNodeHandler)(nil).Define), node)
}

// FindNode mocks base method.
func (m *MockNodeHandler) FindNode(nodeOptions models.NodeOptions, nodesToExclude []uint) (models.Node, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindNode", nodeOptions, nodesToExclude)
	ret0, _ := ret[0].(models.Node)
	ret1, _ := ret[0].(error)
	return ret0, ret1
}

// FindNode indicates an expected call of FindNode.
func (mr *MockNodeHandlerMockRecorder) FindNode(nodeOptions interface{}, nodesToExclude []uint) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindNode", reflect.TypeOf((*MockNodeHandler)(nil).FindNode), nodeOptions, nodesToExclude)
}
