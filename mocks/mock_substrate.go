// Code generated by MockGen. DO NOT EDIT.
// Source: internal/models/node.go

// Package mock_client is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	"github.com/centrifuge/go-substrate-rpc-client/v4/types"
	gomock "github.com/golang/mock/gomock"
	"github.com/threefoldtech/substrate-client"
)

// MockSubstrate is a mock of Substrate interface.
type MockSubstrate struct {
	ctrl     *gomock.Controller
	recorder *MockSubstrateMockRecorder
}

// MockSubstrateMockRecorder is the mock recorder for MockSubstrate.
type MockSubstrateMockRecorder struct {
	mock *MockSubstrate
}

// NewMockSubstrate creates a new mock instance.
func NewMockSubstrate(ctrl *gomock.Controller) *MockSubstrate {
	mock := &MockSubstrate{ctrl: ctrl}
	mock.recorder = &MockSubstrateMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSubstrate) EXPECT() *MockSubstrateMockRecorder {
	return m.recorder
}

// SetNodePowerState mocks base method.
func (m *MockSubstrate) SetNodePowerState(identity substrate.Identity, up bool) (hash types.Hash, err error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetNodePowerState", identity, up)
	ret0, _ := ret[0].(types.Hash)
	ret1, _ := ret[0].(error)
	return ret0, ret1
}

// SetNodePowerState indicates an expected call of SetNodePowerState.
func (mr *MockSubstrateMockRecorder) SetNodePowerState(identity interface{}, up bool) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetNodePowerState", reflect.TypeOf((*MockSubstrate)(nil).SetNodePowerState), identity, up)
}
