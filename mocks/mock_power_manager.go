// Code generated by MockGen. DO NOT EDIT.
// Source: internal/managers/power_manager.go

// Package mock_client is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	"github.com/rawdaGastan/farmerbot/internal/models"
)

// MockPowerHandler is a mock of PowerHandler interface.
type MockPowerHandler struct {
	ctrl     *gomock.Controller
	recorder *MockPowerHandlerMockRecorder
}

// MockPowerHandlerMockRecorder is the mock recorder for MockPowerHandler.
type MockPowerHandlerMockRecorder struct {
	mock *MockPowerHandler
}

// NewMockPowerHandler creates a new mock instance.
func NewMockPowerHandler(ctrl *gomock.Controller) *MockPowerHandler {
	mock := &MockPowerHandler{ctrl: ctrl}
	mock.recorder = &MockPowerHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPowerHandler) EXPECT() *MockPowerHandlerMockRecorder {
	return m.recorder
}

// Configure mocks base method.
func (m *MockPowerHandler) Configure(power models.Power) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Configure", power)
	ret0, _ := ret[0].(error)
	return ret0
}

// Configure indicates an expected call of Configure.
func (mr *MockPowerHandlerMockRecorder) Configure(power interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Configure", reflect.TypeOf((*MockPowerHandler)(nil).Configure), power)
}


// PowerOn mocks base method.
func (m *MockPowerHandler) PowerOn(node models.Node) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PowerOn", node)
	ret0, _ := ret[0].(error)
	return ret0
}

// PowerOn indicates an expected call of PowerOn.
func (mr *MockPowerHandlerMockRecorder) PowerOn(node interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PowerOn", reflect.TypeOf((*MockPowerHandler)(nil).PowerOn), node)
}


// PowerOff mocks base method.
func (m *MockPowerHandler) PowerOff(node models.Node) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PowerOff", node)
	ret0, _ := ret[0].(error)
	return ret0
}

// PowerOff indicates an expected call of PowerOff.
func (mr *MockPowerHandlerMockRecorder) PowerOff(node interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PowerOff", reflect.TypeOf((*MockPowerHandler)(nil).PowerOff), node)
}

// PeriodicWakeup mocks base method.
func (m *MockPowerHandler) PeriodicWakeup() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "PeriodicWakeup")
}

// PeriodicWakeup indicates an expected call of PeriodicWakeup.
func (mr *MockPowerHandlerMockRecorder) PeriodicWakeup() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PeriodicWakeup", reflect.TypeOf((*MockPowerHandler)(nil).PeriodicWakeup))
}


// PowerManagement mocks base method.
func (m *MockPowerHandler) PowerManagement() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "PowerManagement")
}

// PowerManagement indicates an expected call of PowerManagement.
func (mr *MockPowerHandlerMockRecorder) PowerManagement() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PowerManagement", reflect.TypeOf((*MockPowerHandler)(nil).PowerManagement))
}